#!/usr/bin/env python3

import sqlite3, datetime, readline, sys, os
from users import *
from ui import *
from common import *
from liblw import *
from foods import *
import completer as c
import argparse

VERSION = '0.1.8-1'
DB_NAME = sys.path[0] + '/data.db'

parser = argparse.ArgumentParser(
        description='A simple program that allows you to keep track of the time worked',
)
parser.add_argument(
        '-v',
        '--version', 
        action='version', 
        version='%(prog)s ' + VERSION, 
        help='show version and exit'
)

args = parser.parse_args()
# Подключаемся к БД
# И создаем таблицы, если их нет
con = sqlite3.connect(DB_NAME)
cur = con.cursor()
create_tables(cur)

wc = False
current_date = datetime.date.today()

# Устанавливаем дополнение при нажатии табуляции
readline.parse_and_bind('tab: complete')

while True:
    # Получаем id выбраного пользователя, если есть
    # Или выбираем его
    # Или создаем его
    user_id = get_user_id(cur)
    while user_id is None:
        user_id, wc = users_main(cur, user_id)
        if wc:
            con.commit()
            wc = not wc

    # Получаем данные о выбранном пользователе
    user_data = get_user_data_by_id(cur, user_id)
    
    if user_data is None:
        # Если данных нет - возвращаемся к выбору пользователя 
        helps(messages['not_in_list'])
        clean_current_user(cur)
        con.commit()
        continue

    # Получаем записи о всех продуктах
    food_list = get_food_list(cur)

    screen_name = 'diary'
    buttons = [e[0] for e in menu_str[screen_name]]
    
    # Получаем записи из дневника
    # Подсчитываем норму и суммируем имеющееся
    diary = get_data_for_diary(cur, current_date.strftime('%Y-%m-%d'), user_id)
    kcal_norm = float(get_calories_norm(user_data))
    kcal_per_day = '%.1f' % sum([line[2] for line in diary])

    readline.set_completer_delims('\n,')
    readline.set_completer(c.Completer(dict().fromkeys(
            buttons + 
            [food[0] for food in food_list]
    )).complete)

    # Вывод экрана
    action = screen(
        user_data['name'] + ': ' + headers[screen_name] + ' ' + current_date.strftime('%Y-%m-%d') + f' v{VERSION}',
        lambda:
        print_as_table(
            [('норма калорий'.upper(), '', kcal_norm)] + 
            [('всего'.upper(), '', kcal_per_day)] + 
            diary 
            ) if diary else print(messages['ndip']),
        menu_str[screen_name], 2)

   

    if action == 'q': 
        # Выход из проложения
        break
    elif action == 'p':
        # Переход на предыдущий день
        current_date -= datetime.timedelta(days = 1)
    elif action == 'n': 
        # Переход на следующий день
        current_date += datetime.timedelta(days = 1)
    elif action == 'h': 
        # Внутренняя справка
        helps(help_str[screen_name])
    elif action == 's': 
        # Запуск спортивного ассистента
        os.system('python3 ' + sys.path[0] + '/trainer.py -i')

    elif action == 'u':
        # Переход к меню пользователей
        old_user_id, user_id = user_id, None
        while user_id is None:
            user_id, wc = users_main(cur, old_user_id)
            if wc:
                con.commit()
                wc = not wc


    elif action == 'l':
        # Переход к меню продуктов
        end_work = False
        while not end_work:
            end_work, wc = foods_main(cur)
            if wc:
                con.commit()
                wc = not wc




            #  elif action == 'a':
                #  screen_name = 'analyzer'
                #  while True:
                    #  dishes_list = get_dishes_list(cur)
                    #  # АНАЛИЗАТОР РЕЦЕПТА
                    #  screen(
                        #  headers[screen_name],
                        #  lambda: print(*dishes_list) if dishes_list else helps(messages['nd'], 0),
                        #  menu_str[screen_name], 3)

                    #  action = input('>> ').lower().strip()

                    #  if action == 'q': break
                    #  elif action == 'c':
        #  #  введите список продуктов с указанием количества, помогает табуляция
        #  #  проверка, все ли продукты известны
        #  #  подсчет данныэ
        #  #  введите название блюда
        #  #  сохранение в бд dishes
    


           
            #  else: helps(messages['ua'], 1)

    elif action not in 'lpnqht' and len(action) > 2:
        new_entry = { 'date': current_date, 'user': user_id, }

        for el in [ i.strip() for i in action.split(',') ]:

            data = parse_line(el)

            new_entry['title'] = data[0]
            new_entry['value'] = data[1] if data[1] is not None else input(f"количество для '{new_entry['title'][:1].upper() + new_entry['title'][1:]}': ")

            if is_in_db(cur, new_entry['title']) is None:
                helps(
                        messages['nd'] + 
                        f' о {new_entry["title"]}\n' + 
                        messages['new_food'], 0.01
                    )

                # Добавляем новый продукт в БД
                d = get_new_food_data(new_food_params)

                d['title'] = new_entry['title']
                add_new_food(cur, d)
                con.commit()
                wc = True

            # Добавляем запись в дневник
            add_in_diary(cur, new_entry)
            con.commit()

    else: 
        # Неподдерживаемое действие
        helps(messages['ua'], 1)

con.close()
clear()





